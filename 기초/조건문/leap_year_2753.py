year = int(input())

# if (year % 4 == 0):
#     if (year % 100 == 0):
#         if (year % 400 == 0):
#             print('1')
#         else:
#             print('0')
#     else:
#         print('1')
# else:
#     print('0')

def is_leap_year(year):
    result = False
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        result = True
    else:
        result = False
    return result

if is_leap_year(year) == True:
    print('1')
else:
    print('0')

# 처음 이 문제를 접했을 때, 주석처리 되어 있는 부분의 형식으로 코드를 작성했다.
# 너무 가독성이 떨어지는 코드인 것 같아, 다른 사람은 어떤 방식으로 문제를 풀었는지 살펴보았다.
# 조건문을 한 줄의 형태로 표현이 가능하다는 사실을 알게 되었다.
# 다른 방법을 활용해서도 코드를 작성해보았는데, 확실히 조건식이 한 눈에 들어오게 되었다.
# 하지만 하드웨어적 관점에서 코드의 효율성을 검토했을 때, 처음 작성한 코드가 조금 더 효율적이지 않을까라는 의문을 품게 되었다.
# 처음 작성한 코드를 살펴보면, 연도가 4의 배수일 때에만 100의 배수인지를 체크하고, 100의 배수일 때에만 400의 배수인지를 체크한다.
# 재작성한 코드에서는 4의 배수 여부에 관계없이 무조건 400의 배수인지도 체킹을 한다. 4의 배수가 아니면 무조건 400의 배수도 아닌 것인데 불필요한 확인을 한 번 더 수행하는 것이다.
# 첫 번째 방법과 두 번째 방법중 어떤 방법으로 코딩을 하는 것이 올바른 것인지 계속해서 고민해봐야겠다.
